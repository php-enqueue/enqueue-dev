parameters:
    locale: 'en'
    secret: 'ThisTokenIsNotSoSecretChangeIt'


framework:
    #esi:             ~
    #translator:      { fallback: "%locale%" }
    test: ~
    assets: false
    templating: false
    session:
        storage_id: session.storage.mock_file
    secret:          '%secret%'
    router:          { resource: '%kernel.root_dir%/config/routing.yml' }
    default_locale:  '%locale%'

doctrine:
    dbal:
        url:   "%env(DOCTRINE_DSN)%"
        driver: pdo_mysql
        charset:  UTF8

enqueue:
    default:
        transport: 'null:'
        client:
            traceable_producer: true
        job: true
        async_events: true
        async_commands: true

services:
    test_enqueue.client.default.traceable_producer:
        alias: 'enqueue.client.default.traceable_producer'
        public: true

    test_enqueue.transport.default.queue_consumer:
        alias: 'enqueue.transport.default.queue_consumer'
        public: true

    test_enqueue.client.default.queue_consumer:
        alias: 'enqueue.client.default.queue_consumer'
        public: true

    test_enqueue.transport.default.rpc_client:
        alias: 'enqueue.transport.default.rpc_client'
        public: true

    test_enqueue.client.default.producer:
        alias: 'enqueue.client.default.producer'
        public: true

    test_enqueue.client.default.spool_producer:
        alias: 'enqueue.client.default.spool_producer'
        public: true

    test_Enqueue\Client\ProducerInterface:
        alias: 'Enqueue\Client\ProducerInterface'
        public: true

    test_enqueue.client.default.driver:
        alias: 'enqueue.client.default.driver'
        public: true

    test_enqueue.transport.default.context:
        alias: 'enqueue.transport.default.context'
        public: true

    test_enqueue.client.consume_command:
        alias: 'enqueue.client.consume_command'
        public: true

    test.enqueue.client.routes_command:
        alias: 'enqueue.client.routes_command'
        public: true

    test_async_listener:
        class: 'Enqueue\Bundle\Tests\Functional\App\TestAsyncListener'
        public: true
        tags:
            - { name: 'kernel.event_listener', async: true, event: 'test_async', method: 'onEvent' }

    test_command_subscriber_processor:
        class: 'Enqueue\Bundle\Tests\Functional\App\TestCommandSubscriberProcessor'
        public: true
        tags:
            - { name: 'enqueue.command_subscriber', client: 'default' }

    test_topic_subscriber_processor:
        class: 'Enqueue\Bundle\Tests\Functional\App\TestTopicSubscriberProcessor'
        public: true
        tags:
            - { name: 'enqueue.topic_subscriber', client: 'default' }

    test_exclusive_command_subscriber_processor:
        class: 'Enqueue\Bundle\Tests\Functional\App\TestExclusiveCommandSubscriberProcessor'
        public: true
        tags:
            - { name: 'enqueue.command_subscriber', client: 'default' }

    test_async_subscriber:
        class: 'Enqueue\Bundle\Tests\Functional\App\TestAsyncSubscriber'
        public: true
        tags:
            - { name: 'kernel.event_subscriber', async: true }

    test_async_event_transformer:
        class: 'Enqueue\Bundle\Tests\Functional\App\TestAsyncEventTransformer'
        public: true
        arguments:
            - '@enqueue.transport.default.context'
        tags:
            - {name: 'enqueue.event_transformer', eventName: 'test_async', transformerName: 'test_async' }
            - {name: 'enqueue.event_transformer', eventName: 'test_async_subscriber', transformerName: 'test_async' }

    # overwrite async listener with one based on client producer. so we can use traceable producer.
    enqueue.events.async_listener:
        class: 'Enqueue\Bundle\Tests\Functional\App\AsyncListener'
        public: true
        arguments: ['@enqueue.client.default.producer', '@enqueue.events.registry']